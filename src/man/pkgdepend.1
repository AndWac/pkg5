'\" te
.\" Copyright (c) 2007, 2011, Oracle and/or its
.\" affiliates. All rights reserved.
.TH pkgdepend 1 "28 Jul 2011" "SunOS 5.11" "User Commands"
.SH NAME
pkgdepend \- Image Packaging System dependency analyzer
.SH SYNOPSIS
.LP
.nf
/usr/bin/pkgdepend [\fIoptions\fR] \fIcommand\fR [\fIcmd_options\fR] [\fIoperands\fR]
.fi

.LP
.nf
/usr/bin/pkgdepend generate [-IMm] -d \fIdir\fR [-d \fIdir\fR]
    [-D \fIname\fR=\fIvalue\fR] [-k \fIpath\fR] \fImanifest_path\fR
.fi

.LP
.nf
/usr/bin/pkgdepend resolve [-EmoSv] [-d \fIoutput_dir\fR]
    [-e \fIexternal_package_file\fR] [-s \fIsuffix\fR] \fImanifest_path\fR ...
.fi

.SH DESCRIPTION
.sp
.LP
\fBpkgdepend\fR is used to generate and resolve dependencies for packages. A package might depend on files from other packages. \fBpkgdepend\fR is typically used in two passes: file dependency generation and file-to-package resolution.
.sp
.LP
The \fBgenerate\fR subcommand examines the content of a package and determines what external files the package needs.
.sp
.LP
The \fBresolve\fR subcommand takes the list of files from the \fBgenerate\fR step, and searches a reference set of packages to determine the names of the packages that contain those dependent files. The reference set of packages that are searched for the dependent files are the packages that are currently installed on the publisher's system.
.sp
.LP
Several components of delivered files are used as sources of dependency information:
.sp
.ne 2
.mk
.na
\fBELF\fR
.ad
.RS 14n
.rt  
ELF headers in delivered files are analyzed for dependency information, with the \fB-k\fR and \fB-D\fR options modifying the information obtained. For more details on ELF dependencies, see \fBldd\fR(1) and the \fILinker and Libraries Guide\fR.
.RE

.sp
.ne 2
.mk
.na
\fBScripts\fR
.ad
.RS 14n
.rt  
Shell scripts that contain \fB#!\fR lines referencing an interpreter result in a dependency on the package that delivers that interpreter.
.RE

.sp
.ne 2
.mk
.na
\fBPython\fR
.ad
.RS 14n
.rt  
Python scripts are first analyzed as scripts. In addition, any imports the script declares might also serve as sources of dependency information.
.RE

.sp
.ne 2
.mk
.na
\fBHard links\fR
.ad
.RS 14n
.rt  
Hard links in manifests result in a dependency on the package that delivers the link target.
.RE

.sp
.ne 2
.mk
.na
\fBSMF\fR
.ad
.RS 14n
.rt  
Delivered SMF service manifests that include \fBrequire_all\fR dependencies result in dependencies on the packages that deliver the SMF manifests that provide those FMRIs.
.RE

.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
\fB\fB-R\fR \fIdir\fR\fR
.ad
.RS 16n
.rt  
Operate on the image rooted at directory \fIdir\fR. If no directory was specified or determined based on environment, the default is /. See the "Environment Variables" section for more information.
.RE

.sp
.ne 2
.mk
.na
\fB\fB--help\fR or \fB-?\fR\fR
.ad
.RS 16n
.rt  
Displays a usage message.
.RE

.SH SUB-COMMANDS
.sp
.LP
The following subcommands are supported:
.sp
.ne 2
.mk
.na
\fBgenerate\fR [\fB-IMm\fR] \fB-d\fR \fIdir\fR [\fB-d\fR \fIdir\fR] [\fB-D\fR \fIname\fR=\fIvalue\fR] [\fB-k\fR \fIpath\fR] \fImanifest_path\fR
.ad
.sp .6
.RS 4n
Produce the dependencies on files of the manifest specified by \fImanifest_path\fR.
.sp
With \fB-I\fR, show the dependencies that are satisfied within the given manifest.
.sp
With \fB-M\fR, display a list of file types that could not be analyzed.
.sp
With \fB-m\fR, repeat the original manifest with any discovered dependencies added after.
.sp
With \fB-d\fR, add \fIdir\fR to a list of directories to search for the manifest's files.
.sp
For each \fB-D\fR, add the \fIvalue\fR as a way to expand the token \fIname\fR in run paths for ELF file dependencies.
.sp
For each \fB-k\fR, add the \fIpath\fR to the list of run paths to search for kernel modules. Using the \fB-k\fR argument removes the default paths, which are \fB/kernel\fR and \fB/usr/kernel\fR.
.sp
Run paths such as those specified by the \fB-k\fR option can also be specified per action or per manifest by using the action or manifest attribute \fBpkg.depend.runpath\fR. The value of the \fBpkg.depend.runpath\fR attribute is a colon-separated string of the paths to use.
.sp
The use of \fB-k\fR is overridden by any \fBpkg.depend.runpath\fR attributes set in the manifest or action.
.sp
The special token \fB$PKGDEPEND_RUNPATH\fR can be used as one component of the \fBpkg.depend.runpath\fR attribute value in order to include the standard system run path for the file being analyzed.
.sp
In some cases, you might want to prevent automatic generation of dependencies. For example, if a package delivers a sample Python script that imports a set of modules, those modules imported by the sample script are not dependencies for the package that delivers the sample script. Use the action or manifest attribute \fBpkg.depend.bypass-generate\fR to prevent generating dependencies against the specified files.
.sp
The \fBpkg.depend.bypass-generate\fR values are \fBperl5\fR regular expressions that match file names. The regular expressions are implicitly anchored at the start and end of the file path. The value given in the following example matches \fBthis/that\fR but does not match \fBsomething/this/that/the/other\fR.
.sp
.in +2
.nf
pkg.depend.bypass-generate=this/that
.fi
.in -2

.RE

.sp
.ne 2
.mk
.na
\fBresolve\fR [\fB-EmoSv\fR] [\fB-d\fR \fIoutput_dir\fR] [\fB-e\fR \fIexternal_package_file\fR] [\fB-s\fR \fIsuffix\fR] \fImanifest_path\fR ...\fR
.ad
.sp .6
.RS 4n
Transform dependencies on files into dependencies on the packages that deliver those files. Dependencies are first resolved against the manifests given on the command line and then against the packages installed on the system. By default, the dependencies for each manifest are placed in a file named \fB\fImanifest_path\fR.res\fR.
.sp
With \fB-m\fR, repeat the manifest, with any dependencies produced by the \fBgenerate\fR step removed, before adding the resolved dependencies.
.sp
With \fB-o\fR, write the results to standard output. This option is intended for human consumption. Appending this output to a file might result in an invalid manifest. The \fB-d\fR or \fB-s\fR options are strongly recommended instead of \fB-o\fR for use in a pipe line for manifest processing.
.sp
With \fB-d\fR, write the resolved dependencies for each manifest provided in a separate file in \fIoutput_dir\fR. By default, each file has the same base name as the manifest that was the source of the dependencies written to that file.
.sp
With \fB-e\fR, only resolve against those packages from the system whose name matches a pattern in one of the \fIexternal_package_files\fR. Cannot be used with \fB-S\fR.
.sp
With \fB-E\fR, if \fB-e\fR was used, show those packages expected to be external dependencies that were not. If \fB-e\fR was not used, display the external dependencies of the resolved packages -- the packages, not named on the command line, which are targets of dependencies in the resolved packages.
.sp
With \fB-s\fR, for each output file, append \fIsuffix\fR to the base name of the file that was the source of the resolved dependencies. A "." is prepended to \fIsuffix\fR if it is not provided.
.sp
With \fB-S\fR, only resolve against the manifests given on the command line and not against the manifests installed on the system.
.sp
With \fB-v\fR, include additional package dependency debugging metadata.
.RE

.SH EXAMPLES
.LP
\fBExample 1 \fRGenerate Dependencies
.sp
.LP
Generate the dependencies for the manifest written in \fBfoo\fR, whose content directory is in \fB\&./bar/baz\fR, and store the results in \fBfoo.fdeps.\fR

.sp
.in +2
.nf
$ \fBpkgdepend generate -d ./bar/baz foo > foo.fdeps\fR
.fi
.in -2
.sp

.LP
\fBExample 2 \fRResolve Dependencies
.sp
.LP
Resolve the file dependencies in \fBfoo.fdeps\fR and \fBbar.fdeps\fR against each other and against the packages currently installed on the system.

.sp
.in +2
.nf
$ \fBpkgdepend resolve foo.fdeps bar.fdeps\fR
$ \fBls *.res\fR
foo.fdeps.res    bar.fdeps.res
.fi
.in -2
.sp

.LP
\fBExample 3 \fRGenerate and Resolve Dependencies For Two Manifests
.sp
.LP
Generate the file dependencies for two manifests (\fBfoo\fR and \fBbar\fR) and retain all the information in the original manifests. Then resolve the file dependencies and place the resulting manifests in \fB\&./res\fR. These resulting manifests can be used with \fBpkgsend publish\fR.

.sp
.in +2
.nf
$ \fBpkgdepend generate -d /proto/foo -m foo > ./deps/foo\fR
$ \fBpkgdepend generate -d /proto/bar -m bar > ./deps/bar\fR
$ \fBpkgdepend resolve -m -d ./res ./deps/foo ./deps/bar\fR
$ \fBls ./res\fR
foo    bar
.fi
.in -2
.sp

.LP
\fBExample 4 \fRAdd Values To Tokens For ELF File Dependencies
.sp
.LP
Replace all \fBPLATFORM\fR tokens in the run paths in ELF files with \fBsun4v\fR and \fBsun4u\fR while generating the dependencies for the manifest written in \fBfoo\fR whose content directory is in /.

.sp
.in +2
.nf
$ \fBpkgdepend generate -d / -D 'PLATFORM=sun4v' -D 'PLATFORM=sun4u' foo\fR
.fi
.in -2
.sp

.LP
\fBExample 5 \fRSpecify a Kernel Module Directory
.sp
.LP
Specify \fB/kmod\fR as the directory in which to find kernel modules when generating the dependencies for the manifest written in \fBfoo\fR whose content directory is in /.

.sp
.in +2
.nf
$ \fBpkgdepend generate -d / -k /kmod foo\fR
.fi
.in -2
.sp

.LP
\fBExample 6 \fRBypass Dependency Generation
.sp
.LP
Append \fBopt/python\fR to the standard Python run path for a given Python script, and bypass dependency generation against all Python modules called \fBtest\fR for a file delivered as \fBopt/python/foo/file.py\fR.

.sp
.LP
Avoid generating dependencies against any file delivered in \fBusr/lib/python2.6/vendor-packages/xdg\fR.

.sp
.in +2
.nf
$ \fBcat manifest.py\fR
set name=pkg.fmri value=pkg:/mypackage@1.0,1.0
set name=pkg.summary value="My test package"
dir path=opt mode=0755 group=sys owner=root
dir path=opt/python mode=0755 group=sys owner=root
dir path=opt/python/foo mode=0755 group=sys owner=root
file NOHASH path=opt/python/__init__.py mode=0644 group=sys owner=root
file NOHASH path=opt/python/foo/__init__.py mode=0644 group=sys owner=root
#
# Add runpath and bypass-generate attributes:
#
file NOHASH path=opt/python/foo/file.py mode=0644 group=sys owner=root \e
    pkg.depend.bypass-generate=^.*/test.py.*$ \e
    pkg.depend.bypass-generate=^.*/testmodule.so$ \e
    pkg.depend.bypass-generate=^.*/test.so$ \e
    pkg.depend.bypass-generate=^usr/lib/python2.6/vendor-packages/xdg/.*$ \e
    pkg.depend.runpath=$PKGDEPEND_RUNPATH:/opt/python

$ \fBpkgdepend generate -d proto manifest.py\fR
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.ne 2
.mk
.na
\fB\fBPKG_IMAGE\fR\fR
.ad
.RS 13n
.rt  
Specifies the directory that contains the image to use for package operations. This value is ignored if \fB-R\fR is specified.
.RE

.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
\fB\fB0\fR\fR
.ad
.RS 6n
.rt  
Everything worked.
.RE

.sp
.ne 2
.mk
.na
\fB\fB1\fR\fR
.ad
.RS 6n
.rt  
An error occurred.
.RE

.sp
.ne 2
.mk
.na
\fB\fB2\fR\fR
.ad
.RS 6n
.rt  
Invalid command line options were specified.
.RE

.sp
.ne 2
.mk
.na
\fB\fB99\fR\fR
.ad
.RS 6n
.rt  
An unanticipated exception occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Availability\fBpackage/pkg\fR
_
Interface StabilityUncommitted
.TE

.SH SEE ALSO
.sp
.LP
\fBpkg\fR(5)
.sp
.LP
\fBhttp://hub.opensolaris.org/bin/view/Project+pkg/\fR
