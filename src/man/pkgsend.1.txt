User Commands                                            pkgsend(1)


NAME
     pkgsend - image packaging system publication client

SYNOPSIS
     /usr/bin/pkgsend [options] command [cmd_options] [operands]

     /usr/bin/pkgsend generate [-T pattern] [--target file] source ...

     /usr/bin/pkgsend publish [-d source ...] [-s repo_uri_or_path] [-T pattern]
       [--no-catalog] [manifest ...]

DESCRIPTION
     pkgsend allows the publication of new packages and new package
     versions to an image packaging repository using package manifests.
     To create or manage repositories, see pkgrepo(1).  To create package
     archives from packages in an existing repository, see pkgrecv(1).
     For more information about package manifests see pkg(5).

OPTIONS
     The following options are supported:

     --help or -?
          Displays a usage message.

SUBCOMMANDS
     The following subcommands are supported:

     generate [-T pattern] [--target file] source ...

          Read each given source (such as an SVR4 package, directory, tarfile,
          etc.) and emit the manifest describing the sources to stdout.  The
          emitted  manifest can be annotated, have dependencies added or analyzed
          using pkgdepend(1), and its correctness can be verified using pkglint(1),
          etc. before being passed to the publish subcommand.  Supported sources are:

            - filesystem format SVR4 packages
            - datastream format SVR4 packages
            - tar files
            - directories

          If the basename of files in the source match the pattern(s) specified
          with -T, the timestamp of the file is added to the action for that file.
          The pattern uses shell matching rules:

               *      matches everything
               ?      matches any single character
               [seq]  matches any character in seq
               [!seq] matches any character not in seq

          When the specified source is a directory, there is no clear way to
          distinguish a file action from a hardlink action when there are
          multiple pathnames for a single inode.  Normally, the first one
          found in the filesystem walk is treated as a file and the rest as
          hardlinks.  This may be arbitrary, depending on the implementation
          of the filesystem.  To specify which pathnames should be treated as
          files, pass each pathname as an argument to the --target option.
          This option has no effect on other types of sources, as they are
          capable of expressing which pathnames are files and which are
          hardlinks.

          When SVR4 packages are provided as a source, pkgsend(1) will check that
          no files with class action scripts are present and no preinstall,
          postinstall, preremove or postremove scripts are present.  An exception
          is made for any SMF manifests installed with the "manifest" class.
          BASEDIR will be removed from all relocatable paths.

          Any SVR4 package parameters not listed in pkginfo(4) are automatically
          converted to "set" actions, with the name "pkg.send.convert.<name>"
          where <name> is the lower case name of the SVR4 package parameter.  An
          exception is made for the SVR4 parameter "SUNW_PKG_HOLLOW", which, if
          set to "true" will result in all generated actions getting a
          "pkg.send.convert.sunw-pkg-hollow=true" attribute, allowing future
          pkgmogrify(1) transforms to be performed on these actions if necessary.

          The SVR4 "DESC" parameter is converted to a pkg.description value.
          The SVR4 "NAME" parameter is converted to a pkg.summary value.

     publish [-b bundle ...] [-d basedir ...] [-s repo_uri_or_path] [-T pattern]
       [--no-catalog] [manifest ...]

          Publishes a package using the specified package manifest(s) to the
          target package repository, retrieving files for the package from
          the provided source(s).  If multiple manifests are specified, they
          will be joined in the order provided.  If a manifest is not specified,
          the manifest will be read from stdin.

          With -b, add the specified bundle to the list of sources to search
          when looking for files in the manifest.  Bundles are sources such as
          tar files and SVR4 packages.  If this option is specified multiple
          times, sources are searched in the order they appear on the command
          line.  If both -b and -d are specified, -d sources are searched first.
          For a description of supported bundles and how they are used, refer to
          the generate subcommand above.

          With -d, add the specified directory to the list of sources to search
          when looking for files in the manifest.  If this option is specified
          multiple times, sources are searched in the order they appear on the
          command line.  For a description of supported sources and how they
          are used, refer to the generate subcommand above.

          With -s, publish the package to the repository located at the given URI
          or filesystem path.  See the NOTES section below for more information
          about restrictions and suggestions for publication.  See also
          ENVIRONMENT VARIABLES.

          With --no-catalog, do not add the package to the publisher's catalog.
          This option is recommended whenever multiple packages are being
          published at a time as updates to publisher catalogs must be performed
          serially.  Once publication is complete, the refresh subcommand of
          pkgrepo(1) can be used to add the new packages to the respective
          publisher catalogs.

          For all other options, refer to the generate subcommand above for usage
          and their effects.

ENVIRONMENT VARIABLES
     PKG_REPO
          The path or URI of the destination repository.

EXAMPLES
     Example 1:  Create a package using pkgsend generate and publish it.

       $ pkgsend generate /path/to/proto > /path/to/manifests/foo.p5m

     Add the package FMRI for the example.com publisher to the beginning of
     foo.p5m:
       set name=pkg.fmri value=pkg://example.com/foo@1.0

     The resulting manifest should look like this:
       set name=pkg.fmri value=pkg://example.com/foo@1.0
       dir group=sys mode=0755 owner=root path=usr
       dir group=bin mode=0755 owner=root path=usr/bin
       file usr/bin/foo group=bin mode=0555 owner=root path=usr/bin/foo

       $ pkgsend publish -s http://example.com:10000 -d /path/to/proto \
           /path/to/manifests/foo.p5m

     Example 2:  Create and publish a trivial package.

     Create a manifest for publisher example.com containing the following lines:
       set name=pkg.fmri value=pkg://example.com/foo@1.0-1
       file /exdir/foo mode=0555 owner=root group=bin path=/usr/bin/foo

     Publish the package:
       $ pkgsend publish -s http://example.com:10000 -d /exdir

     Example 3:  Publish a package using filesystem-based publication
         and a pre-existing manifest.

       $ pkgsend publish -s /tmp/example_repo -d /tmp/pkg_files \
           /tmp/pkg_manifest

EXIT STATUS
     The following exit values are returned:

     0     Command succeeded.

     1     An error occurred.

     2     Invalid command line options were specified.

ATTRIBUTES
     See attributes(5) for descriptions of the following attributes:
     ____________________________________________________________
    |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
    |_____________________________|_____________________________|
    | Availability                |                             |
    |_____________________________|_____________________________|

SEE ALSO
     pkgdepend(1), pkgrepo(1), pkg.depotd(1M), attributes(5), pkg(5)

NOTES
     The image packaging system is an under-development feature.
     Command names, invocation, formats, and operations are all subject
     to change.  Development is hosted in the OpenSolaris community
     at:

     http://hub.opensolaris.org/bin/view/Project+pkg/

     Other package source formats can be created.  Other forms of package
     publication, via the underlying Python API or via the web API, are
     also possible.

     When publishing individual package files that are greater than 128MB
     in size, filesystem-based publication must be used due to publication
     protocol limitations.  It is also the recommended method of publication
     when access control for a repository is needed.

     When using filesystem-based publication, any pkg.depot(1M) processes
     serving the target repository must be restarted after publication is
     completed for the changes to be reflected in its web interface or
     search responses.  See pkg.depotd(1M) for more information.
