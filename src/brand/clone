#!/bin/ksh -p
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
#

. /usr/lib/brand/ipkg/common.ksh

m_usage=$(gettext "clone {sourcezone} [-c profile | dir]\n\tThe -c option gives a profile or a directory of profiles to be applied to the system after clone.")
f_nosource=$(gettext "Error: unable to determine source zone dataset.")

# Clean up on failure
trap_exit()
{
	if (( ZONE_IS_MOUNTED != 0 )); then
		error "$v_unmount"
		zoneadm -z $ZONENAME unmount
	fi

	exit $ZONE_SUBPROC_INCOMPLETE
}

# Source and destination zones
unset sc_config
typeset src dst	
# Brand clone options are handled below
while getopts "R:z:" opt; do
	case $opt in
		R)	opt_R="$OPTARG" ;;
		z)	opt_z="$OPTARG" ;;
		*)	fail_usage "";;
	esac
done
shift $((OPTIND-1))

if (($# < 1)); then
	fail_usage ""
fi

init_zone dst "$opt_z" "$opt_R"
init_zone src "$1"
shift

let OPTIND=1
# Other brand clone options are invalid for this brand.
while getopts "c:" opt; do
	case $opt in
		c)	sc_config="$OPTARG" ;;
		*)	fail_usage "";;
	esac
done

get_current_gzbe
get_active_be src || fatal "$e_no_active_be"

# From here on out the global variables referenced are for the destination zone
eval $(bind_legacy_zone_globals dst)

# Make dataset snapshots
snapshot_zone_rpool src "${dst}_snap%02d" snapname \
    || fail_incomplete "$f_zfs_snapshot"

# Make dataset clones
clone_zone_rpool src dst "$snapname" || fail_incomplete "$f_zone_clone"

ZONE_IS_MOUNTED=1
trap trap_exit EXIT

#
# Completion of reconfigure_zone will leave the zone root mounted for
# ipkg brand zones.  The root won't be mounted for labeled brand zones.
#
is_brand_labeled
(( $? == 0 )) && reconfigure_zone $sc_config

trap - EXIT
exit $ZONE_SUBPROC_OK
