.. CDDL HEADER START

.. The contents of this file are subject to the terms of the
   Common Development and Distribution License (the "License").
   You may not use this file except in compliance with the License.

.. You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
   or http://www.opensolaris.org/os/licensing.
   See the License for the specific language governing permissions
   and limitations under the License.

.. When distributing Covered Code, include this CDDL HEADER in each
   file and include the License file at usr/src/OPENSOLARIS.LICENSE.
   If applicable, add the following below this CDDL HEADER, with the
   fields enclosed by brackets "[]" replaced with your own identifying
   information: Portions Copyright [yyyy] [name of copyright owner]

.. CDDL HEADER END

.. Copyright (c) 2011, Oracle and/or its affiliates. All rights reserved.

Chapter 2
---------

Package lifecycle
.................

This chapter provides an overview of the software package lifecycle with IPS.

Software packages go through a detailed lifecycle with IPS; understanding
the various phases of the package lifecycle will help the developer and
administrator optimize their results.

The following sections provide a high-level description of each state in
the package lifecycle:

Creation
~~~~~~~~

    Packages can be created by anybody.  IPS does not impose any particular
    software build system or directory hierarchy on the part of the package
    author.  We go into more detail about package creation in *Chapter 4* and
    discuss aspects of package creation throughout the remaining chapters in
    this guide.

Publication
~~~~~~~~~~~

    Packages are either published to an IPS repository, or delivered as a .p5p
    package archive through existing software delivery mechanisms.   In order
    to access software from an IPS repository, the repository can be added
    to the Solaris system (using the ``pkg set-publisher`` command) or accessed
    as a temporary source (using the ``-g`` flag to pkg(1))  We show an example
    of package publication in *Chapter 4*.

Installation
~~~~~~~~~~~~

    Packages can be installed on a system, either from an IPS repository,
    accessed over http://, https:// or file:// URLs, or installed directly from
    a .p5p package archive.  We go into more detail about package installation
    in *Chapter 5*.

Updates
~~~~~~~

    Updated versions of packages may become available, either
    published to an IPS repository, or delivered as a new .p5p package archive.

    An installed package may then be brought up to date, either individually,
    or as part of an entire system update.

    It is important to note, that IPS does not have the same concept of
    "patching" as the SVR4 packaging system had: all changes to packaged
    software are delivered by updated packages.

    The packaging system is optimized to install only the changed portions 
    delivered by an updated package, but essentially, package
    updates are performed in much the same way as package installs.  We go into
    more detail about package updating in *Chapter 5*.

Renames
~~~~~~~

    During a package's lifecycle, it may be desirable to rename a package.
    Often this is done for organizational reasons, or to refactor packages.

    Examples of package refactoring, would be where we are interested in
    combining several packages into a single package or to breaking a single
    package into multiple smaller packages, or a combination of the two.

    IPS handles actions moving between packages gracefully, and has capabilities
    to allow old package names to persist on the system, automatically
    installing the new packages when a user asks to install a renamed package.
    We go into more detail about package renaming in *Chapter 10*.

.. raw:: pdf

    PageBreak

Obsoletion
~~~~~~~~~~

    Eventually a package may reach the end of its life.  A package publisher may
    decide that a package will no longer be supported, and that it will not have
    any more updates made available.  IPS allows publishers to mark such
    packages as obsolete.

    Obsolete packages can no longer be used as a target for dependencies from
    other packages, and their contents are removed from the system.  We go into
    more detail about obsolete packages in *Chapter 10*.

Removal
~~~~~~~

    Finally, a package can be removed from the system assuming that no other
    packages have dependencies on it.  We go into more detail about package
    removal in *Chapter 5*.

