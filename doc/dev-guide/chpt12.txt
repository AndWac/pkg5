
	Chapter 12, Dealing with Zones, describes how IPS handles zones
	and discusses those cases where package developers should be
	aware of zones.

Developing packages which work consistently with zones often involves little to
no additional work but a few situations call for close attention from
developers.  When considering zones and packaging there are two questions which
need to be answered:
1) Does anything in my package have an interface which crosses the boundary
between the global zone and non-global zones?
2) How much of my package should be installed in the non-global zone?

If the answer to question one is yes, then it's important to place a parent
dependency in the package being developed.  If a single package delivers both
sides of the interface then a parent dependency on
'feature/package/dependency/self' will ensure that the global zone and the
non-global zones contain the same version of the package, preventing version
skew across the interface.  The dependency will also ensure that if the package
is in a non-global zone, it is present in the global zone.  If the interface
spans multiple packages, then the package containing the non-global zone side of
the interface must contain a parent dependency on the package which delivers the
global zone side of the interface.  For more details on the parent dependency,
please see chapter 6.

If the answer to question two is "all of it" (and that's typically the case)
then nothing needs to be done to the package to enable it to function properly.
For consumers of the package though, it can be reassuring to see that the
packager properly considered zone installation and decided that this package can
function in one.  For that reason, we encourage package developers to explicitly
state their package functions in both global and non-global zones.  This is done
by adding the following action to the manifest:
set name=variant.opensolaris.zone value=global value=nonglobal

If the answer to question to is "none of it" (for example a package which only
delivers kernel modules or drivers), then the package should specify that it
cannot be installed in a zone.  This is done by adding the following action to
the manifest:
set name=variant.opensolaris.zone value=global

If the answer to question to is "some of it", then things get slightly more
complicated.  The first step is to state that the package can be installed in
both global and non-global zones.  Again, the action that states this is:
set name=variant.opensolaris.zone value=global value=nonglobal

The next step is to identify those actions which are only relevant in either the
global or non-global zone.  The global-zone-only actions should have the
additional attribute 'variant.opensolaris.zone=global' added to them.
Similarly, 'variant.opensolaris.zone=nonglobal' should be added to those actions
which only apply in non-global zones.


If a package has a parent dependency or has pieces which are different in global
and non-global zones, it's important to test that the package works as expected
in the non-global zone as well as the global zone.  If the package has a parent
dependency on itself, then the global zone should configure the repository which
delivers the package as one of its origins.  The package should be installed in
the global zone, then in the non-global zone for testing.  Occasionally problems
may be encountered when trying to install the package in the non-global zone.
Typically the first steps to take to attack the problem are to ensure that the
zoneproxy service is online in both the non-global zone and the global zone and
that the system-repository service is online in the global zone.  These three
services provide publisher configuration to the non-global zone and a
communication channel the non-global zone can use to make requests to the system
publishers.  Remember that you won't be able to update the package in the
non-global zone, since it has a parent dependency on itself.  Initiating the
update from the global zone and allowing pkg's linked image code to update the
non-global zone is the right solution.  Once the package is installed in the
non-global zone, testing it's functionality can begin.

If the package does not have a parent dependency on itself, then it's not
necessary to configure the publisher in the global zone nor install the package
there.  Further, updating the package in the global zone will not update it in
the non-global zone, causing potentially unexpected results when testing the
older non-global zone package.  The simplest solution in this situation is to
make the publisher available to the non-global zone and install and update the
package from within the zone.  If the zone cannot access the publisher, then
configuring it in the global zone will work.  In that case, it's still best to
install and update the package in the non-global zone.
