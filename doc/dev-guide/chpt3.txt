.. CDDL HEADER START

.. The contents of this file are subject to the terms of the
   Common Development and Distribution License (the "License").
   You may not use this file except in compliance with the License.

.. You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
   or http://www.opensolaris.org/os/licensing.
   See the License for the specific language governing permissions
   and limitations under the License.

.. When distributing Covered Code, include this CDDL HEADER in each
   file and include the License file at usr/src/OPENSOLARIS.LICENSE.
   If applicable, add the following below this CDDL HEADER, with the
   fields enclosed by brackets "[]" replaced with your own identifying
   information: Portions Copyright [yyyy] [name of copyright owner]

.. CDDL HEADER END

.. Copyright (c) 2011, Oracle and/or its affiliates. All rights reserved.

Chapter 3
---------

Basic Terminology
.................

This chapter lays out the basic terminology used in the Image Packaging 
System and describes the various components.

Image
~~~~~

IPS is designed to install packages in an image.  An image is a directory 
tree, and can be mounted in a variety of locations as needed.  Images
are of three types:

  Full 
         in a full image,  all dependencies are resolved within the 
         image itself and IPS maintains the dependencies in a consistent
	 manner.  

  Zone 
         in a zone image, IPS maintains the zone consistent with its
         global zone as defined by dependencies in the packages.

  User
         not yet fully functional for Solaris; 

In general, images are created or cloned by other software (installers, 
beadm, zonecfg, etc) rather than by the user.  

Package
~~~~~~~

IPS deals with all software installed on a system in the granularity of
packages.  A package consists of actions.  Every package has a publisher,
a name and a version; these are represented by a fault management 
resource identifier (FMRI) with the scheme 'pkg:'.  For example::

    pkg://solaris/system/library@0.5.11,5.11-0.168:20110618T001946Z

Here, 'solaris'' is the publisher.  'system/library' is the package name.
'0.5.11,5.11-0.168:20110618T001946Z' is the version.

The publisher information is optional; if present, it must be preceded by
'pkg://'. An FMRI that includes the publisher is referred to as
being "fully qualified".  FMRIs without publisher information may omit
the scheme.  If included, it should be of the form 'pkg:/' to indicate
that the first component is part of the package name rather than the
publisher. 

Package names are hierarchal with components separated by '/'
characters and can be arbitrarily deep.  Package names form a single
name space across publishers; packages with the same name and version
but different publishers are assumed to be interchangable in terms of
external dependencies and interfaces.  Package cname components are case
sensitive and  must start with a letter or number, but may include 
[_-.+] characters in latter positions.


A package version consists of four sequences of integer numbers,
separated by punctuation.  The elements in the first three sequences
are separated by dots, and the sequences are arbitrarily long.
Leading zeros in version components (e.g. 01.1 or 1.01) are not
allowed.

The first part is the component version.  For components that are
are developed as part of Solaris, this will represent the point
in the release when this package last changed.  For a component with its
own development lifecycle, this sequence will be the dotted release
number, such as '2.4.10'.  For a detailed discussion of how Solaris
versions its packages, see *Chapter 12*, Solaris and IPS.

The second part, which if present must follow a comma, is the build
version.  Solaris uses this to define for which minor release of Solaris
this package was compiled.

The third part, which if present must follow a dash, is the branch
version, a versioning component, providing vendor-specific
information.  This may be incremented when the packaging metadata is
changed, independently of the component, may contain a build number,
or some other information.  Solaris usage of this field is detailed
in *Chapter 12*.

The fourth part, which if present must follow a colon, is a timestamp.
It represents when the package was published in GMT time.

The package versions are ordered using left-to-right precedence; thus
the timestamp is the least significant part of the version space; the
number immediately after the '@' is the most significant.

Publisher
~~~~~~~~~

A name that identifies the source of the packages in a unique manner.
Using Internet domains or trademarks the developer's organization owns
works well here.  Package clients combine all specified sources of 
packages for a given publisher together when computing packaging
solutions.  Publisher names may include upper and lower case
letters, numbers, dashes and periods - the same characters as a 
valid hostname.

Actions
~~~~~~~

Actions are used to define the software that comprises a package; they
define the data needed to create this software component.  A set of
actions are collected in a package manifest, where they appear as
lines of text. Actions look like this::

    <action name> <attribute1>=<value1> <attribute2>=<value2> ...

or for an example::

    dir group=sys mode=0755 owner=root path=a/b/c

The first field identifies this as a dir (or directory) action; the
*name*=*value* attributes describe the familiar properties of that
directory.  In the cases where the action has data associated with it,
such as a file, the action looks like this::

    file 3b16e0d6cee005c580fb4967f291ff4708d23d97 \
        chash=de19003ae941249d372b93dedb526dd17004be81 group=sys \
        mode=0444 owner=root path=etc/release pkg.csize=141 pkg.size=189

Here the second attribute (without a name= prepending it) is the sha1
hash of the file.  This attribute may alternately appear as a regular
attribute with the name ``hash``; if both forms are present they must
match.  The sha1 hash of the compressed file appears as a normal
attribute named ``chash``.

Action metadata is freely extensible; additional attributes can be
added to actions as desired.  Attribute names may not include spaces,
quotes or '=' characters.  Attribute values may have all of those,
although spaces must be enclosed in single or double quotes.  Single
quotes need not be escaped inside of a double-quoted string, and vice
versa, though a quote may be prefixed with a backslash ("\") so as not
to terminate the quoted string.  Backslashes may be escaped with
backslashes.

Multiple attributes with the same name may be present and are
treated as unordered lists.

Note that manifests are largely created using programs; it is not
expected that that developers produce complete manifests by hand.

Most actions have key attributes; this attribute is that makes this
action unique from all others in the image.  For file system
objects, this is the path for that object.

.. raw:: pdf

    PageBreak

Types of actions
~~~~~~~~~~~~~~~~

There are currently twelve action types in IPS.  The following
section describes each action type, and the attributes that 
define these actions.

File Actions
````````````
     The ``file`` action is by far the most common action, and represents an
     'ordinary file'.  It references a payload, and has four standard
     attributes:

     path
            The filesystem path where the file is installed.  This is a
            file action's key attribute.

     mode
            The access permissions (in numeric form) of the file.  These
            are simple Unix-style permissions only, not ACLs.

     owner
            The name of the user which owns the file.

     group
            The name of the group which owns the file.

     The payload is a "positional" attribute, in that it is not named.  It
     is the first word after the action name.  In a published manifest, it
     is the SHA-1 hash of the file contents.  If present in a manifest that
     has yet to be published, it represents the path at which the payload
     may be found (see pkgsend(1)).  The "hash" attribute may be used
     instead of the positional attribute, should the value include an
     equals sign.  Both may be used in the same action; however, the hashes
     must be identical.

     Other attributes include:

     preserve
               This specifies that the file's contents should not be
               overwritten on upgrade if they are determined to have
               changed since it was installed or last upgraded.  On
               initial installs, if an existing file is found, it will
               be salvaged (i.e. stored in /var/pkg/lost+found).

               * If the value of preserve is ``renameold``, then the existing
                 file will be renamed with the extension '.old', and the new
                 file will be put in its place.

               * If the value of preserve is ``renamenew``, then the existing
                 file will be left alone, and the new file will be installed
                 with the extension '.new'.

               * If the value of preserve is ``legacy``, then this file will not
                 be installed for initial package installs.  On upgrades, any
                 existing file will be renamed with the extension '.legacy',
                 and then the new file will be put in its place.

               * If the value of preserve is ``true`` (or a value not listed
                 above, such as ``strawberry``), then the existing file will
                 be left alone, and the new file will not be installed.

     overlay
               This specifies whether the action allows other packages to
               deliver a file at the same location or whether it delivers
               a file intended to overlay another.  This functionality is
               intended for use with configuration files that don't
               participate in any self-assembly (e.g. /etc/motd) and that
               can be safely overwritten.

               If overlay is not specified, multiple packages may not deliver
               files to the same location.

               * If the value of overlay is ``allow``, one other package is
                 allowed to deliver a file to the same location.  This value
                 has no effect unless the preserve attribute is also set.

               * If the value of overlay is ``true``, the file delivered by the
                 action will overwrite any other action that has specified
                 ``allow``.  Changes to the installed file will be preserved
                 based on the value of the preserve attribute of the overlaying
                 file.  On removal, the contents of the file will be preserved
                 if the action being overlayed is still installed regardless of
                 whether the preserve attribute was specified.  Only one action
                 may overlay another, and the ``mode``, ``owner``, and ``group``
                 attributes must match.

     Files may also be 'tasted', and depending on the flavor, may have
     additional interesting attributes.  For ELF files, the following
     attributes are recognized:

     elfarch
              The architecture of the ELF file.  This will be the output of
              ``uname -p`` on the architecture for which the file is built.

     elfbits
              This will be '32' or '64'.

     elfhash
              This is the hash of the 'interesting' ELF sections in
              the file.  These are the sections that are mapped into
              memory when the binary is loaded, and are the only ones
              necessary to consider when determining whether two
              binaries' executable behavior will differ.

     original_name
              This attribute is used to handle editable files moving
              from package to package or from place to place, or
              both.  The form this takes is the name of the
              originating package, followed by a colon and the
              original path to the file.  Any file being deleted
              is recorded either with its package and path, or
              with the value of the original_name attribute if
              specified.  Any editable file being installed that
              has the ``original_name`` attribute set will use the
              file of that name if it is deleted as part of the
              same packaging operation.  Note that once set, this
              attribute should never change even the package or
              file are repeatedly renamed; this will permit
              upgrade to occur from all previous versions.

     revert-tag
              This attribute is used to tag editable files that should
              be reverted as a set.  Multiple ``revert-tag`` values may
              be specified; the file will revert to its manifest-defined
              state when ``pkg revert`` is invoked with any of those tags
              specified.  See pkg(1).

Directory Actions
`````````````````

     The ``dir`` action is like the file action in that it represents a
     filesystem object, but a directory instead of an ordinary file.  It
     has the same four standard attributes as the file action, and ``path``
     is the key attribute.

     Directories are reference counted in IPS.  When the last package
     that either explicitly or implicitly references a directory no
     longer does so, that directory is removed.  If there are
     unpackaged file system objects under that directory, those items
     will be moved into $IMAGE_META/lost+found.

     If it is desirable to move unpackaged contents into a new directory,
     this attribute will be useful:

     salvage-from
          This names a directory of salvaged items.  A directory with
          such an attribute will inherit on creation the salvaged directory
          contents if they exist.

     During installation, pkg(1) will check that all instances of a given
     directory action on the system have the same owner, group and mode
     attributes, and will not install the action if conflicting actions
     exist on the system.

Link Actions
````````````

     The ``link`` action represents a symbolic link.  It has two standard
     attributes:

     path
          The filesystem path where the symlink is installed.  This is a
          link action's key attribute.

     target
          The target of the symlink; the filesystem object to which the
          link resolves.

     The ``link`` action also takes attributes that allow for multiple
     implementations of a given piece of software to be installed on the
     system at the same time. Link actions are installed that that are
     *mediated*, allowing administrators to easily toggle which links 
     point to which implementation as desired.  These *mediated links* are
     discussed in *Chapter 10*.

Hardlink actions
````````````````

     The ``hardlink`` action represents a hard link.  It has the same
     attributes as the link action, and ``path`` is also its key attribute.

Driver actions
``````````````

     The ``driver`` action represents a device driver.  It does not reference
     a payload: the driver files themselves must be installed as file
     actions.  The following attributes are recognized (see add_drv(1M) for
     more information):

     name
                  The name of the driver.  This is usually, but not always,
                  the filename of the driver binary.  This is the driver
                  action's key attribute.

     alias
                  This represents an alias for the driver.  There may be
                  more than one alias attribute for any given driver.
                  There are no special quoting rules necessary.


     class
                  This represents a driver class.  There may be more than
                  one class attribute for any given driver.

     perms
                  This represents the filesystem permissions for the
                  driver's device nodes.

     clone_perms
                  This represents the filesystem permissions for the
                  "clone" driver's minor nodes for this driver.

     policy
                  This specifies additional security policy for the device.
                  There may be more than one policy attribute for any given
                  driver, but no minor device specification may be present in
                  more than one attribute.

     privs
                  This specifies privileges used by the driver.  There may
                  be more than one privs attribute for any given driver.

     devlink
                  This specifies an entry in /etc/devlink.tab.  The value
                  is the exact line to go into the file, with tabs denoted
                  by "\t".  See devlinks(1M) for more information.  There
                  may be more than one devlink attribute for any given
                  driver.

Depend actions
``````````````

     The ``depend`` action represents an inter-package dependency.  A package
     may depend on another package because the first requires functionality
     in the second for the functionality in the first to work, or even to
     install.  Dependencies are covered in more detail in *Chapter 6*.

     The following attributes are recognized:

     type
           The type of the dependency.

           * If the value is ``require``, then the
             dependency is required.  A package cannot be installed if any of
             its required dependencies cannot be satisfied.

           * If the value is ``optional``, then the dependency, if present, must
             be at the specified version level or greater.

           * If the value is ``exclude``, then the containing package cannot
             be installed if the dependency is present at the specified
             version level or greater.

           * If the value is ``incorporate``, then the dependency is
             optional, but the version of the dependent package will
             become constrained.  See *Chapter 6* for a discussion of
             constraints and freezing. XXX need to write that.

           * If the value is ``require-any``, then any one of multiple dependent
             packages as specified by multiple ``fmri`` attributes will satisfy
             the dependency

           * If the value is ``conditional``, the dependency is required
             only if the package defined by the predicate attribute is present
             on the system.

           * If the value is ``origin``, the dependency must, if present,
             be at the specified value or better on the image to be modified
             prior to installation.  If the value of the ``root-image`` attribute
             is ``true``, the dependency must be present on the image rooted at '/'
             in order to install this package.

           * If the value is ``group``, the dependency is required unless the
             package is on the image avoid list.  Note that obsolete packages
             silently satisfy the group dependency.  See the avoid subcommand
             in pkg(1).

           * If the value is ``parent``, then the dependency is ignored if
             the image is not a child image.  If the image is a child
             image then it's required that the dependency be present in
             the parent image.  The package version matching for a
             ``parent`` dependency is the same as that used for ``incorporate``
             dependencies.

     fmri
           The FMRI representing the depended-upon package.  It must not
           include the publisher.  In the case of ``require-any`` dependencies,
           there may be multiple values.  This is the dependency action's
           key attribute.

     predicate
           The FMRI representing the predicate for ``conditional``
           dependencies.

     root-image
           Has an effect only for ``origin`` dependencies as mentioned above.

License actions
```````````````

    The ``license`` action represents a license or other informational
    file associated with the package contents.  A package may deliver
    licenses, disclaimers, or other guidance to the package installer
    through the use of the license action.
    The payload of the license action will be delivered into the image
    metadata directory related to the package, and should only contain
    human-readable textual data.  It should not contain HTML or any
    other form of markup. License actions, through attributes, may
    indicate to clients that the related payload must be displayed
    and/or require "acceptance" of it.  Please note that the exact
    method of display and/or acceptance is at the discretion of
    clients.

    The following attributes are recognized:

    license
                    This attribute provides a meaningful description
                    for the license to assist users in determining
                    the contents without reading the license text
                    itself.  Some example values might include:

                    * "ABC Co. Copyright Notice"
                    * "ABC Co. Custom License"
                    * "Common Development and Distribution License 1.0 (CDDL)"
                    * "GNU General Public License 2.0 (GPL)"
                    * "GNU General Public License 2.0 (GPL) Only"
                    * "MIT License"
                    * "Mozilla Public License 1.1 (MPL)"
                    * "Simplified BSD License"

                    Wherever possible, including the version of the
                    license in the description is recommended as shown
                    above.  This value must be unique within a package.

    must-accept
                    When ``true``, this license must be accepted by a
                    user before the related package can be installed
                    or updated.  Omission of this attribute will be
                    considered equivalent to ``false``.  The method of
                    acceptance (interactive, configuration-based,
                    etc.) is at the discretion of clients.

    must-display
                    When ``true``, the action's payload must be displayed
                    by clients during packaging operations.  Omission of
                    this value is considered equivalent to ``false``.
                    This attribute should not be used for copyright
                    notices, only actual licenses or other material
                    that must be displayed during operations.  The
                    method of display is at the discretion of
                    clients.

    The ``license`` attribute is the key attribute for the license action.

Legacy actions
``````````````

    The ``legacy`` action represents package data used by a legacy
    packaging system.  The attributes associated with this action are
    added into the legacy system's databases in order that the tools
    querying those databases might operate as if the legacy package were
    actually installed.  In particular, this should be sufficient to
    convince the legacy system that the package named by the 'pkg'
    attribute is installed on the system, so that it may be used to
    satisfy dependencies.

    The following attributes, named in accordance with the parameters on
    pkginfo(4), are recognized:

    category
              The value for the CATEGORY parameter.  The default value
              is ``system``.

    desc
              The value for the DESC parameter.

    hotline
              The value for the HOTLINE parameter.

    name
              The value for the NAME parameter.  The default value is
              ``none provided``.

    pkg
              The abbreviation for the package being installed.  The
              default value is the name from the package's FMRI.

    vendor
              The value for the VENDOR parameter.

    version
              The value for the VERSION parameter.  The default value is
              the version from the package's FMRI.

    The ``pkg`` attribute is the key attribute for the legacy action.

Set actions
```````````

     The ``set`` action represents a package-level attribute, or metadata,
     such as the package description.

     The following attributes are recognized:

     name   
              The name of the attribute.

     value  
              The value given to the attribute.

     The set action can deliver any metadata the package author chooses;
     however, there are a number of well-defined attribute names which have
     specific meaning to the packaging system.


     pkg.fmri
                           The name and version of the containing package.

     info.classification
                           One or more tokens which a pkg(5) client may use
                           to classify the package.  The value should have
                           a scheme (such as "org.opensolaris.category.2008"
                           or "org.acm.class.1998") and the actual
                           classification, such as "Applications/Games",
                           separated by a colon (:).  The first is used
			   by the pkgmanager GUI.

     pkg.description
                           A detailed description of the contents and
                           functionality of the package, typically a
                           paragraph or so in length.

     pkg.summary
                           A brief synopsis of the description.

     pkg.obsolete
                           When ``true``, the package is marked obsolete.  An
                           obsolete package may have no actions other than
                           more set actions, and must not be marked renamed.

     pkg.renamed
                           When ``true``, the package has been renamed.
                           There must be one or more ``depend`` actions in
                           the package as well which point to the package

     pkg.human-version
                           The version scheme used by IPS is strict, and
                           doesn't allow for letters or words in the pkg.fmri
                           version field.  If there's a commonly used
                           human-readable version available for a given package,
                           that can be set here, and will be displayed by
                           IPS tools.  It does not get used as a basis for
                           version comparison and cannot be used in place of
                           the ``pkg.fmri`` version.

Signature actions
`````````````````
    Signature actions are used as part of the support for package signing in
    IPS.  They are covered in detail in *Chapter 11*


User actions
````````````

    XXX need content


Group actions
`````````````

    XXX need content


Repository
~~~~~~~~~~

A software repository contains packages for one or more publishers.
Repositories can be configured for access in a variety of different
ways: http, https, file (local or via NFS or SMB) and as a 
self-contained archive file, usually with the '.p5p' extension.

A repository accessed via http or https has a server process associated
with it; in the case of file repos the repository software runs as
part of the accessing client.

Repositories are created with the pkgrepo(1) command.



